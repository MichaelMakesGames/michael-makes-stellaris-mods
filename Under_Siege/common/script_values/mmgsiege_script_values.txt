mmgsiege_country_base_production_energy = {
	modifier = {
		add = 20
		is_country_type = default
	}
	modifier = {
		add = 10
		is_country_type = default
		is_machine_empire = yes
	}
	modifier = {
		add = 1000
		is_country_type = fallen_empire
	}
	modifier = {
		add = 1000
		is_country_type = awakened_fallen_empire
	}
	modifier = {
		add = 500
		is_country_type = enclave_mercenary
	}
	modifier = {
		add = 100
		is_country_type = gate_builders
	}
}

mmgsiege_country_base_production_minerals = {
	modifier = {
		add = 20
		is_country_type = default
	}
	modifier = {
		add = 10
		is_country_type = default
		# Either
		OR = {
			# You're a lithoid regular empire or hive mind
			AND = {
				is_lithoid_empire = yes
				OR = {
					is_regular_empire = yes
					is_hive_empire = yes
				}
			}
			# Or a machine empire with a lithoid secondary species
			AND = {
				has_country_flag = lithoid_subspecies
				is_machine_empire = yes
			}
			# Or a machine empire with no secondary species
			AND = {
				is_machine_empire = yes
				NOR = {
					has_country_flag = lithoid_subspecies
					has_country_flag = non_lithoid_subspecies
				}
			}
		}
	}
	modifier = {
		subtract = 5
		is_country_type = default
		is_lithoid_empire = yes
		has_valid_civic = civic_hive_cordyceptic_drones
	}
	modifier = {
		add = 250
		is_country_type = fallen_empire
	}
	modifier = {
		add = 250
		is_country_type = awakened_fallen_empire
	}
	modifier = {
		add = 250
		is_country_type = enclave_mercenary
	}
	modifier = {
		add = 10
		is_country_type = gate_builders
	}
}

mmgsiege_country_base_production_food = {
	modifier = {
		add = 10
		is_country_type = default
		OR = { #Either
			# You're a non-lithoid non-individual machine, regular empire or hive mind
			AND = {
				is_individual_machine = no
				is_lithoid_empire = no
				OR = {
					is_regular_empire = yes
					is_hive_empire = yes
				}
			}
			# You are a lithoid empire with a non-lithoid subspecies
			AND = {
				is_lithoid_empire = yes
				has_country_flag = non_lithoid_subspecies
			}
			# Or a machine empire with a non-lithoid secondary species
			AND = {
				has_country_flag = non_lithoid_subspecies
				is_machine_empire = yes
			}
			# Or an individual machine with a non-lithoid species
			AND = {
				is_individual_machine = yes
				has_country_flag = non_lithoid_subspecies
			}
		}
	}
	modifier = {
		add = 5
		is_country_type = default
		is_lithoid_empire = yes
		has_valid_civic = civic_hive_cordyceptic_drones
	}
	modifier = {
		add = 100
		is_country_type = fallen_empire
	}
	modifier = {
		add = 100
		is_country_type = awakened_fallen_empire
	}
	modifier = {
		add = 100
		is_country_type = enclave_mercenary
	}
}

mmgsiege_country_base_production_consumer_goods = {
	modifier = {
		add = 10
		is_country_type = default
		OR = {
			is_gestalt = no
			has_valid_civic = civic_machine_servitor
		}
	}
	modifier = {
		add = 200
		is_country_type = fallen_empire
	}
	modifier = {
		add = 100
		is_country_type = awakened_fallen_empire
	}
	modifier = {
		add = 100
		is_country_type = enclave_mercenary
	}
}

mmgsiege_planet_production_offset_energy = {
	modifier = {
		subtract = owner.value:mmgsiege_country_base_production_energy
		is_capital = yes
	}
}

mmgsiege_planet_production_offset_minerals = {
	modifier = {
		subtract = owner.value:mmgsiege_country_base_production_minerals
		is_capital = yes
	}
}

mmgsiege_planet_production_offset_food = {
	modifier = {
		subtract = owner.value:mmgsiege_country_base_production_food
		is_capital = yes
	}
}

mmgsiege_planet_production_offset_consumer_goods = {
	modifier = {
		subtract = owner.value:mmgsiege_country_base_production_consumer_goods
		is_capital = yes
	}
}

mmgsiege_planet_biological_army_supply_shortage = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_planet_army
		parameters = {
			limit = { mmgsiege_is_biological_army = yes }
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_planet_army
		mode = divide
	}
	modifier = {
		multiply = 0
		NOT = { mmgsiege_has_resource_shortage = { RESOURCE = food } }
	}
	modifier = {
		multiply = 2
		mmgsiege_has_resource_shortage = { RESOURCE = food LEVEL = 2 }
	}
	modifier = {
		multiply = 5
		mmgsiege_has_resource_shortage = { RESOURCE = food LEVEL = 3 }
	}
	modifier = {
		multiply = 10
		mmgsiege_has_resource_shortage = { RESOURCE = food LEVEL = 4 }
	}
}

mmgsiege_planet_lithoid_army_supply_shortage = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_planet_army
		parameters = {
			limit = { mmgsiege_is_lithoid_army = yes }
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_planet_army
		mode = divide
	}
	modifier = {
		multiply = 0
		NOT = { mmgsiege_has_resource_shortage = { RESOURCE = minerals } }
	}
	modifier = {
		multiply = 2
		mmgsiege_has_resource_shortage = { RESOURCE = minerals LEVEL = 2 }
	}
	modifier = {
		multiply = 5
		mmgsiege_has_resource_shortage = { RESOURCE = minerals LEVEL = 3 }
	}
	modifier = {
		multiply = 10
		mmgsiege_has_resource_shortage = { RESOURCE = minerals LEVEL = 4 }
	}
}

mmgsiege_planet_mechanical_army_supply_shortage = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_planet_army
		parameters = {
			limit = { mmgsiege_is_mechanical_army = yes }
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_planet_army
		mode = divide
	}
	modifier = {
		multiply = 0
		NOT = { mmgsiege_has_resource_shortage = { RESOURCE = energy } }
	}
	modifier = {
		multiply = 2
		mmgsiege_has_resource_shortage = { RESOURCE = energy LEVEL = 2 }
	}
	modifier = {
		multiply = 5
		mmgsiege_has_resource_shortage = { RESOURCE = energy LEVEL = 3 }
	}
	modifier = {
		multiply = 10
		mmgsiege_has_resource_shortage = { RESOURCE = energy LEVEL = 4 }
	}
}

mmgsiege_planet_average_army_supply_shortage = {
	base = 0
	add = value:mmgsiege_planet_biological_army_supply_shortage
	add = value:mmgsiege_planet_lithoid_army_supply_shortage
	add = value:mmgsiege_planet_mechanical_army_supply_shortage
	round = yes
}

mmgsiege_stockpile_maximum = {
	base = 0
	add = value:mmgsiege_stockpile_maximum_from_capital

	# VANILLA
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|resource_silo|MULT|500|TECH_BONUS|500|
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|fe_silo_1|MULT|5000|
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|fe_silo_2|MULT|10000|

	# AVB
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|avb_resource_silo_2|MULT|1000|TECH_BONUS|500|
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|avb_resource_silo_3|MULT|2000|TECH_BONUS|500|

	# Evolved
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|tec_resource_silo_2|MULT|1000|TECH_BONUS|500|
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|tec_resource_silo_3|MULT|1500|TECH_BONUS|500|
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|tec_biohive_resource_silo_1|MULT|500|TECH_BONUS|500|
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|tec_biohive_resource_silo_2|MULT|1000|TECH_BONUS|500|
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|tec_biohive_resource_silo_3|MULT|1500|TECH_BONUS|500|
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|tec_vault_of_plenty|MULT|1000|TECH_BONUS|1000|
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|tec_vault_of_acquisition|MULT|500|TECH_BONUS|500|
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|tec_vault_of_unity|MULT|500|TECH_BONUS|500|
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|tec_vault_of_wealth|MULT|500|TECH_BONUS|500|

	# ZOFE
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|fallen_silo_1|MULT|5000|
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|fallen_silo_2|MULT|10000|
}

# this is just for display
# deriving this from value:mmgsiege_stockpile_maximum (instead of vice versa) to avoid potential call depth issues
mmgsiege_stockpile_maximum_from_silos = {
	base = 0
	add = value:mmgsiege_stockpile_maximum
	subtract = value:mmgsiege_stockpile_maximum_from_capital
}

mmgsiege_stockpile_maximum_from_capital = {
	base = 100
	modifier = {
		add = 200 # total: 300
		has_upgraded_capital = yes
	}
	modifier = {
		add = 200 # total: 500
		has_major_upgraded_capital = yes
	}
	modifier = {
		add = 500 # total: 1000
		has_fully_upgraded_capital = yes
	}
	modifier = {
		add = 1000 # total: 2000
		has_upgraded_capital_4 = yes
	}
	modifier = {
		add = 3000 # total: 5000
		has_upgraded_capital_5 = yes
	}
	modifier = {
		add = 5000 # total: 10000
		has_upgraded_capital_6 = yes
	}
}

mmgsiege_stockpile_maximum_from_buildings = {
	base = $MULT$
	modifier = {
		add = $TECH_BONUS|0$
		exists = owner
		owner = { has_technology = tech_construction_templates }
	}
	complex_trigger_modifier = {
		trigger = num_buildings
		parameters = {
			type = building_$BUILDING_TYPE$
		}
		mode = multiply
	}
}

mmgsiege_max_transferable_to_local_stockpile_shipping_cost = {
	base = 0
	add = value:mmgsiege_max_transferable_to_local_stockpile|RESOURCE|$RESOURCE$|SHIPPING_COST|$SHIPPING_COST$|ENERGY|$ENERGY$|
	multiply = value:shipping_cost|balance|1|shipping_cost|$SHIPPING_COST$|
}

mmgsiege_max_transferable_to_local_stockpile = {
	base = 0
	# start with amount in empire stockpile
	complex_trigger_modifier = {
		trigger = resource_stockpile_compare
		trigger_scope = owner
		parameters = { resource = $RESOURCE$ }
		mode = add
	}
	# special case for energy, since energy is used to pay for shipping cost:
	# X is amount transferred, R is shipping cost rate, S is current energy stockpile
	# X + HX = S
	# X (1 + H) = S
	# X = S / (1 + H)
	modifier = {
		divide = value:mmgsiege_one_plus_shipping_cost|SHIPPING_COST|$SHIPPING_COST$|
		roci_shipping_module_active = yes
		always = $ENERGY$
	}
	# handle shipping cost for resources other than energy
	modifier = {
		max = value:mmgsiege_max_can_pay_shipping_cost|SHIPPING_COST|$SHIPPING_COST$|
		roci_shipping_module_active = yes
	}
	# available capacity
	max = value:mmgsiege_available_stockpile|RESOURCE|$RESOURCE$|
	# max parameter
	[[MAX] max = $MAX$]
	# min and floor
	min = 0
	floor = yes
}

mmgsiege_max_can_pay_shipping_cost = {
	base = 0
	complex_trigger_modifier = {
		trigger = resource_stockpile_compare
		trigger_scope = owner
		parameters = { resource = energy }
		mode = add
	}
	divide = value:shipping_cost|balance|1|shipping_cost|$SHIPPING_COST$|
	modifier = {
		multiply = 2
		mmgsiege_is_capital_or_orbits_capital = yes
	}
}

mmgsiege_one_plus_shipping_cost = {
	base = 0
	add = value:shipping_cost|balance|1|shipping_cost|$SHIPPING_COST$|
	modifier = {
		multiply = 0.5
		mmgsiege_is_capital_or_orbits_capital = yes
	}
	add = 1
}

mmgsiege_shipping_cost_capital_sensitive = {
	base = 0
	add = value:shipping_cost|balance|$BALANCE$|shipping_cost|$SHIPPING_COST$|
	modifier = {
		multiply = 0.5
		mmgsiege_is_capital_or_orbits_capital = yes
	}
}

mmgsiege_available_stockpile = {
	base = 0
	add = value:mmgsiege_stockpile_maximum
	modifier = {
		subtract = mmgsiege_$RESOURCE$_stockpile
		is_variable_set = mmgsiege_$RESOURCE$_stockpile
	}
}
