mmgsiege_country_base_production_energy = {
	modifier = {
		add = 20
		is_country_type = default
	}
	modifier = {
		add = 10
		is_country_type = default
		is_machine_empire = yes
	}
	modifier = {
		add = 1000
		is_country_type = fallen_empire
	}
	modifier = {
		add = 1000
		is_country_type = awakened_fallen_empire
	}
	modifier = {
		add = 500
		is_country_type = enclave_mercenary
	}
	modifier = {
		add = 100
		is_country_type = gate_builders
	}
}

mmgsiege_country_base_production_minerals = {
	modifier = {
		add = 20
		is_country_type = default
	}
	modifier = {
		add = 10
		is_country_type = default
		OR = {
			is_regular_empire = yes
			is_hive_empire = yes
		}
		is_lithoid_empire = yes
	}
	modifier = {
		add = 250
		is_country_type = fallen_empire
	}
	modifier = {
		add = 250
		is_country_type = awakened_fallen_empire
	}
	modifier = {
		add = 250
		is_country_type = enclave_mercenary
	}
	modifier = {
		add = 10
		is_country_type = gate_builders
	}
}

mmgsiege_country_base_production_food = {
	modifier = {
		add = 10
		is_country_type = default
		OR = {
			is_regular_empire = yes
			is_hive_empire = yes
		}
		is_lithoid_empire = no
	}
	modifier = {
		add = 100
		is_country_type = fallen_empire
	}
	modifier = {
		add = 100
		is_country_type = awakened_fallen_empire
	}
	modifier = {
		add = 100
		is_country_type = enclave_mercenary
	}
}

mmgsiege_country_base_production_consumer_goods = {
	modifier = {
		add = 10
		is_country_type = default
		OR = {
			is_gestalt = no
			has_valid_civic = civic_machine_servitor
		}
	}
	modifier = {
		add = 200
		is_country_type = fallen_empire
	}
	modifier = {
		add = 100
		is_country_type = awakened_fallen_empire
	}
	modifier = {
		add = 100
		is_country_type = enclave_mercenary
	}
}

mmgsiege_planet_production_offset_energy = {
	modifier = {
		subtract = owner.value:mmgsiege_country_base_production_energy
		is_capital = yes
	}
}

mmgsiege_planet_production_offset_minerals = {
	modifier = {
		subtract = owner.value:mmgsiege_country_base_production_minerals
		is_capital = yes
	}
}

mmgsiege_planet_production_offset_food = {
	modifier = {
		subtract = owner.value:mmgsiege_country_base_production_food
		is_capital = yes
	}
}

mmgsiege_planet_production_offset_consumer_goods = {
	modifier = {
		subtract = owner.value:mmgsiege_country_base_production_consumer_goods
		is_capital = yes
	}
}

mmgsiege_planet_biological_army_supply_shortage = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_planet_army
		parameters = {
			limit = { mmgsiege_is_biological_army = yes }
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_planet_army
		mode = divide
	}
	modifier = {
		multiply = 0
		NOT = { mmgsiege_has_resource_shortage = { RESOURCE = food } }
	}
	modifier = {
		multiply = 2
		mmgsiege_has_resource_shortage = { RESOURCE = food LEVEL = 2 }
	}
	modifier = {
		multiply = 5
		mmgsiege_has_resource_shortage = { RESOURCE = food LEVEL = 3 }
	}
	modifier = {
		multiply = 10
		mmgsiege_has_resource_shortage = { RESOURCE = food LEVEL = 4 }
	}
}

mmgsiege_planet_lithoid_army_supply_shortage = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_planet_army
		parameters = {
			limit = { mmgsiege_is_lithoid_army = yes }
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_planet_army
		mode = divide
	}
	modifier = {
		multiply = 0
		NOT = { mmgsiege_has_resource_shortage = { RESOURCE = minerals } }
	}
	modifier = {
		multiply = 2
		mmgsiege_has_resource_shortage = { RESOURCE = minerals LEVEL = 2 }
	}
	modifier = {
		multiply = 5
		mmgsiege_has_resource_shortage = { RESOURCE = minerals LEVEL = 3 }
	}
	modifier = {
		multiply = 10
		mmgsiege_has_resource_shortage = { RESOURCE = minerals LEVEL = 4 }
	}
}

mmgsiege_planet_mechanical_army_supply_shortage = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_planet_army
		parameters = {
			limit = { mmgsiege_is_mechanical_army = yes }
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_planet_army
		mode = divide
	}
	modifier = {
		multiply = 0
		NOT = { mmgsiege_has_resource_shortage = { RESOURCE = energy } }
	}
	modifier = {
		multiply = 2
		mmgsiege_has_resource_shortage = { RESOURCE = energy LEVEL = 2 }
	}
	modifier = {
		multiply = 5
		mmgsiege_has_resource_shortage = { RESOURCE = energy LEVEL = 3 }
	}
	modifier = {
		multiply = 10
		mmgsiege_has_resource_shortage = { RESOURCE = energy LEVEL = 4 }
	}
}

mmgsiege_planet_average_army_supply_shortage = {
	base = 0
	add = value:mmgsiege_planet_biological_army_supply_shortage
	add = value:mmgsiege_planet_lithoid_army_supply_shortage
	add = value:mmgsiege_planet_mechanical_army_supply_shortage
	round = yes
}

mmgsiege_stockpile_maximum = {
	base = 0
	add = value:mmgsiege_stockpile_maximum_from_capital
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|resource_silo|MULT|1000|
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|stronghold|MULT|100|
	add = value:mmgsiege_stockpile_maximum_from_buildings|BUILDING_TYPE|fortress|MULT|200|
}

mmgsiege_stockpile_maximum_from_capital = {
	base = 100
	modifier = {
		add = 200
		has_upgraded_capital = yes
	}
	modifier = {
		add = 200
		has_major_upgraded_capital = yes
	}
	modifier = {
		add = 500
		has_fully_upgraded_capital = yes
	}
}

mmgsiege_stockpile_maximum_from_buildings = {
	base = 0
	complex_trigger_modifier = {
		trigger = num_buildings
		parameters = {
			type = building_$BUILDING_TYPE$
		}
		mode = add
		mult = $MULT$
	}
}

mmgsiege_max_transferable_to_local_stockpile_shipping_cost = {
	base = 0
	add = value:mmgsiege_max_transferable_to_local_stockpile|RESOURCE|$RESOURCE$|SHIPPING_COST|$SHIPPING_COST$|ENERGY|$ENERGY$|
	multiply = value:shipping_cost|balance|1|shipping_cost|$SHIPPING_COST$|
}

mmgsiege_max_transferable_to_local_stockpile = {
	base = 0
	# start with amount in empire stockpile
	complex_trigger_modifier = {
		trigger = resource_stockpile_compare
		trigger_scope = owner
		parameters = { resource = $RESOURCE$ }
		mode = add
	}
	# special case for energy, since energy is used to pay for shipping cost:
	# X is amount transferred, R is shipping cost rate, S is current energy stockpile
	# X + HX = S
	# X (1 + H) = S
	# X = S / (1 + H)
	modifier = {
		divide = value:mmgsiege_one_plus_shipping_cost|SHIPPING_COST|$SHIPPING_COST$|
		roci_shipping_module_active = yes
		always = $ENERGY$
	}
	# handle shipping cost for resources other than energy
	modifier = {
		max = value:mmgsiege_max_can_pay_shipping_cost|SHIPPING_COST|$SHIPPING_COST$|
		roci_shipping_module_active = yes
	}
	# available capacity
	max = value:mmgsiege_available_stockpile|RESOURCE|$RESOURCE$|
	# max parameter
	[[MAX] max = $MAX$]
	# min and floor
	min = 0
	floor = yes
}

mmgsiege_max_can_pay_shipping_cost = {
	base = 0
	complex_trigger_modifier = {
		trigger = resource_stockpile_compare
		trigger_scope = owner
		parameters = { resource = energy }
		mode = add
	}
	divide = value:shipping_cost|balance|1|shipping_cost|$SHIPPING_COST$|
	modifier = {
		multiply = 2
		mmgsiege_is_capital_or_orbits_capital = yes
	}
}

mmgsiege_one_plus_shipping_cost = {
	base = 0
	add = value:shipping_cost|balance|1|shipping_cost|$SHIPPING_COST$|
	modifier = {
		multiply = 0.5
		mmgsiege_is_capital_or_orbits_capital = yes
	}
	add = 1
}

mmgsiege_shipping_cost_capital_sensitive = {
	base = 0
	add = value:shipping_cost|balance|$BALANCE$|shipping_cost|$SHIPPING_COST$|
	modifier = {
		multiply = 0.5
		mmgsiege_is_capital_or_orbits_capital = yes
	}
}

mmgsiege_available_stockpile = {
	base = 0
	add = value:mmgsiege_stockpile_maximum
	modifier = {
		subtract = mmgsiege_$RESOURCE$_stockpile
		is_variable_set = mmgsiege_$RESOURCE$_stockpile
	}
}
