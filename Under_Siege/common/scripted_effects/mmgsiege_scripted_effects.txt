mmgsiege_export_planet_balance_and_upkeep = {
	export_trigger_value_to_variable = {
		trigger = planet_resource_compare
		parameters = {
			resource = $RESOURCE$
			type = balance
		}
		variable = mmgsiege_$RESOURCE$_balance
	}
	export_trigger_value_to_variable = {
		trigger = planet_resource_compare
		parameters = {
			resource = $RESOURCE$
			type = upkeep
		}
		variable = mmgsiege_$RESOURCE$_upkeep
	}
	# remove the stockpile budget from capital
	if = {
		limit = {
			has_deposit = mmgsiege_stockpile_budget_feature
			owner = {
				is_variable_set = mmgsiege_$RESOURCE$_stockpile_budget
			}
		}
		change_variable = {
			which = mmgsiege_$RESOURCE$_balance
			value = owner.mmgsiege_$RESOURCE$_stockpile_budget
		}
		subtract_variable = {
			which = mmgsiege_$RESOURCE$_upkeep
			value = owner.mmgsiege_$RESOURCE$_stockpile_budget
		}
	}
}

mmgsiege_check_for_and_update_resource_shortage = {
	# store these in variables for easier usage and so we don't recalc them
	# (docs warn that this trigger is expensive)
	# do NOT clear them, since they are also used for stockpile automation
	mmgsiege_export_planet_balance_and_upkeep = { RESOURCE = $RESOURCE$ }

	# save copy of balance, unmodified by stockpile, so we can reset it
	set_variable = {
		which = mmgsiege_$RESOURCE$_balance_copy
		value = mmgsiege_$RESOURCE$_balance
	}

	# if there's a deficit, check for stockpile, modifying balance as appropriate
	if = {
		limit = {
			is_variable_set = mmgsiege_$RESOURCE$_stockpile
			check_variable = {
				which = mmgsiege_$RESOURCE$_stockpile
				value > 0
			}
			check_variable = {
				which = mmgsiege_$RESOURCE$_balance
				value < 0
			}
		}
		# check if has deficit and stockpile >= deficit
		if = {
			limit = {
				check_variable_arithmetic = {
					which = mmgsiege_$RESOURCE$_stockpile
					add = mmgsiege_$RESOURCE$_balance # balance is negative, so add not subtract
					value >= 0
				}
			}
			# subtract deficit from stockpile and zero out balance
			change_variable = {
				which = mmgsiege_$RESOURCE$_stockpile
				value = mmgsiege_$RESOURCE$_balance
			}
			set_variable = {
				which = mmgsiege_$RESOURCE$_balance
				value = 0
			}
		}
		else = {
			# subtract stockpile from deficit and zero out stockpile
			change_variable = {
				which = mmgsiege_$RESOURCE$_balance
				value = mmgsiege_$RESOURCE$_stockpile
			}
			set_variable = {
				which = mmgsiege_$RESOURCE$_stockpile
				value = 0
			}
		}
	}

	# check is balance is negative
	if = {
		limit = {
			check_variable = {
				which = mmgsiege_$RESOURCE$_balance
				value < 0
			}
		}
		# initialize variable if needed
		if = {
			limit = { NOT = { is_variable_set = mmgsiege_$RESOURCE$_shortage_progress } }
			set_variable = {
				which = mmgsiege_$RESOURCE$_shortage_progress
				value = 0
			}
		}
		# add progress
		# balance is negative, so we subtract the balance to add it to the progress
		subtract_variable = {
			which = mmgsiege_$RESOURCE$_shortage_progress
			value = mmgsiege_$RESOURCE$_balance
		}
		# check progress
		if = {
			limit = {
				check_variable = {
					which = mmgsiege_$RESOURCE$_shortage_progress
					value >= mmgsiege_$RESOURCE$_upkeep
				}
			}
			mmgsiege_increase_resource_shortage = { RESOURCE = $RESOURCE$ }
		}
	}
	# positive balance, reset progress and decrease or remove modifier
	else = {
		mmgsiege_decrease_resource_shortage = { RESOURCE = $RESOURCE$ }
	}

	# save copy of balance, unmodified by stockpile, so we can reset it
	set_variable = {
		which = mmgsiege_$RESOURCE$_balance
		value = mmgsiege_$RESOURCE$_balance_copy
	}
	clear_variable = mmgsiege_$RESOURCE$_balance_copy
}

# decrease shortages on planets without siege, never increase
mmgsiege_check_for_and_update_resource_shortage_no_siege = {
	if = {
		# decrease/remove modifier if planet is positive or empire is positive
		limit = {
			OR = {
				planet_resource_compare = {
					resource = $RESOURCE$
					type = balance
					value >= 0
				}
				owner = {
					OR = {
						NOT = { has_deficit = $RESOURCE$ }
						is_ai = yes # let's be nicer to AI to prevent post-war economic death spirals
					}
				}
			}
		}
		mmgsiege_decrease_resource_shortage = { RESOURCE = $RESOURCE$ }
	}
}

mmgsiege_increase_resource_shortage = {
	# subtract upkeep from progress (keep leftover progres for next level)
	subtract_variable = {
		which = mmgsiege_$RESOURCE$_shortage_progress
		value = mmgsiege_$RESOURCE$_upkeep
	}
	# increase or add modifier
	if = {
		limit = { has_modifier = mmgsiege_$RESOURCE$_shortage_major }
		remove_modifier = mmgsiege_$RESOURCE$_shortage_major
		add_modifier = { modifier = mmgsiege_$RESOURCE$_shortage_critical }
	}
	else_if = {
		limit = { has_modifier = mmgsiege_$RESOURCE$_shortage_moderate }
		remove_modifier = mmgsiege_$RESOURCE$_shortage_moderate
		add_modifier = { modifier = mmgsiege_$RESOURCE$_shortage_major }
	}
	else_if = {
		limit = { has_modifier = mmgsiege_$RESOURCE$_shortage_minor }
		remove_modifier = mmgsiege_$RESOURCE$_shortage_minor
		add_modifier = { modifier = mmgsiege_$RESOURCE$_shortage_moderate }
	}
	else_if = {
		limit = { NOT = { has_modifier = mmgsiege_$RESOURCE$_shortage_critical } }
		add_modifier = { modifier = mmgsiege_$RESOURCE$_shortage_minor }
		set_planet_flag = mmgsiege_$RESOURCE$_shortage
	}
}

mmgsiege_decrease_resource_shortage = {
	if = {
		limit = { is_variable_set = mmgsiege_$RESOURCE$_shortage_progress }
		clear_variable = mmgsiege_$RESOURCE$_shortage_progress
	}
	if = {
		limit = { has_modifier = mmgsiege_$RESOURCE$_shortage_critical }
		remove_modifier = mmgsiege_$RESOURCE$_shortage_critical
		add_modifier = { modifier = mmgsiege_$RESOURCE$_shortage_major }
	}
	else_if = {
		limit = { has_modifier = mmgsiege_$RESOURCE$_shortage_major }
		remove_modifier = mmgsiege_$RESOURCE$_shortage_major
		add_modifier = { modifier = mmgsiege_$RESOURCE$_shortage_moderate }
	}
	else_if = {
		limit = { has_modifier = mmgsiege_$RESOURCE$_shortage_moderate }
		remove_modifier = mmgsiege_$RESOURCE$_shortage_moderate
		add_modifier = { modifier = mmgsiege_$RESOURCE$_shortage_minor }
	}
	else_if = {
		limit = { has_modifier = mmgsiege_$RESOURCE$_shortage_minor }
		remove_modifier = mmgsiege_$RESOURCE$_shortage_minor
		remove_planet_flag = mmgsiege_$RESOURCE$_shortage
	}
}

mmgsiege_increase_stockpile_max_from_buildings = {
	export_trigger_value_to_variable = {
		trigger = num_buildings
		parameters = {
			type = $BUILDING_TYPE$
		}
		variable = mmgsiege_stockpile_maximum_from_$BUILDING_TYPE$
	}
	multiply_variable = {
		which = mmgsiege_stockpile_maximum_from_$BUILDING_TYPE$
		value = $MULTIPLIER$
	}
	change_variable = {
		which = mmgsiege_stockpile_maximum
		value = mmgsiege_stockpile_maximum_from_$BUILDING_TYPE$
	}
	# clear_variable = mmgsiege_stockpile_from_$BUILDING_TYPE$
}

mmgsiege_calculate_stockpile_priority = {
	# define balance/upkeep vars, only if needed
	# they are updated via event every 6 months
	# (will be outdated, but should be sufficient for determining priority)
	if = {
		limit = {
			NAND = {
				is_variable_set = mmgsiege_$RESOURCE$_balance
				is_variable_set = mmgsiege_$RESOURCE$_upkeep
			}
		}
		mmgsiege_export_planet_balance_and_upkeep = { RESOURCE = $RESOURCE$ }
	}

	# calc deficit scale, 0-100 if there's deficit
	set_variable = {
		which = mmgsiege_$RESOURCE$_deficit_scale
		value = mmgsiege_$RESOURCE$_balance
	}
	multiply_variable = {
		which = mmgsiege_$RESOURCE$_deficit_scale
		value = -100
	}
	if = {
		limit = {
			check_variable = {
				which = mmgsiege_$RESOURCE$_upkeep
				value > 1
			}
		}
		divide_variable = {
			which = mmgsiege_$RESOURCE$_deficit_scale
			value = mmgsiege_$RESOURCE$_upkeep
		}
	}

	# calc stockpile months
	if = {
		limit = { is_variable_set = mmgsiege_$RESOURCE$_stockpile }
		set_variable = {
			which = mmgsiege_$RESOURCE$_stockpile_months
			value = mmgsiege_$RESOURCE$_stockpile
		}
		if = {
			limit = {
				check_variable = {
					which = mmgsiege_$RESOURCE$_balance
					value < -1
				}
			}
			divide_variable = {
				which = mmgsiege_$RESOURCE$_stockpile_months
				value = mmgsiege_$RESOURCE$_balance
			}
			multiply_variable = {
				which = mmgsiege_$RESOURCE$_stockpile_months
				value = -1
			}
		}
	}
	else = {
		set_variable = {
			which = mmgsiege_$RESOURCE$_stockpile_months
			value = 0
		}
	}

	# calc priority (num pops + deficit scale - stockpile months)
	set_variable = {
		which = mmgsiege_$RESOURCE$_stockpile_priority
		value = trigger:num_pops
	}
	change_variable = {
		which = mmgsiege_$RESOURCE$_stockpile_priority
		value = mmgsiege_$RESOURCE$_deficit_scale
	}
	subtract_variable = {
		which = mmgsiege_$RESOURCE$_stockpile_priority
		value = mmgsiege_$RESOURCE$_stockpile_months
	}

	# multiply if positive and bordering hostile-controlled system
	if = {
		limit = {
			check_variable = {
				which = mmgsiege_$RESOURCE$_stockpile_priority
				value > 0
			}
			solar_system = {
				any_neighbor_system = {
					exists = owner
					owner = {
						is_at_war_with = prevprevprev.owner
					}
				}
			}
		}
		multiply_variable = {
			which = mmgsiege_$RESOURCE$_stockpile_priority
			value = 2
		}
	}

	# cleanup
	clear_variable = mmgsiege_$RESOURCE$_deficit_scale
	clear_variable = mmgsiege_$RESOURCE$_stockpile_months
}

mmgsiege_increase_stockpile_budget = {
	if = {
		limit = { NOT = { is_variable_set = mmgsiege_$RESOURCE$_stockpile_budget } }
		set_variable = {
			which = mmgsiege_$RESOURCE$_stockpile_budget
			value = 0
		}
	}
	change_variable = {
		which = mmgsiege_$RESOURCE$_stockpile_budget
		value = $AMOUNT$
	}
	if = {
		limit = {
			check_variable = {
				which = mmgsiege_$RESOURCE$_stockpile_budget
				value > 10000
			}
		}
		set_variable = {
			which = mmgsiege_$RESOURCE$_stockpile_budget
			value = 10000
		}
	}
	capital_scope = {
		if = {
			limit = {
				NOT = { has_deposit = mmgsiege_stockpile_budget_feature }
			}
			add_deposit = mmgsiege_stockpile_budget_feature
		}
	}
}

mmgsiege_decrease_stockpile_budget = {
	if = {
		limit = { NOT = { is_variable_set = mmgsiege_$RESOURCE$_stockpile_budget } }
		set_variable = {
			which = mmgsiege_$RESOURCE$_stockpile_budget
			value = 0
		}
	}
	subtract_variable = {
		which = mmgsiege_$RESOURCE$_stockpile_budget
		value = $AMOUNT$
	}
	if = {
		limit = {
			check_variable = {
				which = mmgsiege_$RESOURCE$_stockpile_budget
				value < 0
			}
		}
		set_variable = {
			which = mmgsiege_$RESOURCE$_stockpile_budget
			value = 0
		}
	}
}

mmgsiege_allocate_stockpile_budget = {
	if = {
		limit = {
			is_variable_set = mmgsiege_$RESOURCE$_stockpile_budget
			check_variable = {
				which = mmgsiege_$RESOURCE$_stockpile_budget
				value > 0
			}
		}

		# init unallocated var
		set_variable = {
			which = mmgsiege_$RESOURCE$_stockpile_budget_unallocated
			value = mmgsiege_$RESOURCE$_stockpile_budget
		}

		# init can_stockpile flag and priority var
		every_owned_planet = {
			mmgsiege_calculate_stockpile_priority = {
				RESOURCE = $RESOURCE$
			}
			if = {
				limit = {
					mmgsiege_can_stockpile = { RESOURCE = $RESOURCE$ }
				}
				set_planet_flag = mmgsiege_can_stockpile_$RESOURCE$
			}
		}

		# main loop, allocate until there no more unallocated budget or no valid planets
		while = {
			limit = {
				check_variable = {
					which = mmgsiege_$RESOURCE$_stockpile_budget_unallocated
					value > 0
				}
				any_owned_planet = {
					has_planet_flag = mmgsiege_can_stockpile_$RESOURCE$
					NOT = { has_planet_flag = mmgsiege_$RESOURCE$_stockpiled }
				}
			}
			ordered_owned_planet = {
				limit = {
					has_planet_flag = mmgsiege_can_stockpile_$RESOURCE$
					NOT = { has_planet_flag = mmgsiege_$RESOURCE$_stockpiled }
				}
				order_by = mmgsiege_$RESOURCE$_stockpile_priority
				position = 0
				set_variable = {
					which = mmgsiege_$RESOURCE$_to_stockpile
					value = prev.mmgsiege_$RESOURCE$_stockpile_budget_unallocated
				}
				# set stockpile to 0 if needed
				if = {
					limit = { NOT = { is_variable_set = mmgsiege_$RESOURCE$_stockpile } }
					set_variable = {
						which = mmgsiege_$RESOURCE$_stockpile
						value = 0
					}
				}
				# max of 100 can be stockpiled on single planet
				if = {
					limit = {
						check_variable = {
							which = mmgsiege_$RESOURCE$_to_stockpile
							value > 100
						}
					}
					set_variable = {
						which = mmgsiege_$RESOURCE$_to_stockpile
						value = 100
					}
				}
				# don't stockpile above planet stockpile max
				if = {
					limit = {
						check_variable_arithmetic = {
							which = mmgsiege_$RESOURCE$_stockpile
							add = mmgsiege_$RESOURCE$_to_stockpile
							value > mmgsiege_stockpile_maximum
						}
					}
					set_variable = {
						which = mmgsiege_$RESOURCE$_to_stockpile
						value = mmgsiege_stockpile_maximum
					}
					subtract_variable = {
						which = mmgsiege_$RESOURCE$_to_stockpile
						value = mmgsiege_$RESOURCE$_stockpile
					}
				}
				# update stockpile, update unallocated, flag planet
				change_variable = {
					which = mmgsiege_$RESOURCE$_stockpile
					value = mmgsiege_$RESOURCE$_to_stockpile
				}
				prev = {
					subtract_variable = {
						which = mmgsiege_$RESOURCE$_stockpile_budget_unallocated
						value = prev.mmgsiege_$RESOURCE$_to_stockpile
					}
				}
				clear_variable = mmgsiege_$RESOURCE$_to_stockpile
				set_planet_flag = mmgsiege_$RESOURCE$_stockpiled
			}
		} # end main loop

		# if there's any unallocated budget left, refund it
		if = {
			limit = {
				check_variable = {
					which = mmgsiege_$RESOURCE$_stockpile_budget_unallocated
					value > 0
				}
			}
			add_resource = {
				$RESOURCE$ = 1
				multiplier = mmgsiege_$RESOURCE$_stockpile_budget_unallocated
			}
		}

		# clean up
		clear_variable = mmgsiege_$RESOURCE$_stockpile_budget_unallocated
		every_owned_planet = {
			limit = {
				has_planet_flag = mmgsiege_$RESOURCE$_stockpiled
			}
			remove_planet_flag = mmgsiege_$RESOURCE$_stockpiled
		}
		every_owned_planet = {
			limit = {
				has_planet_flag = mmgsiege_can_stockpile_$RESOURCE$
			}
			remove_planet_flag = mmgsiege_can_stockpile_$RESOURCE$
		}
	}
}

mmgsiege_set_stockpile_budget_percent = {
	export_trigger_value_to_variable = {
		trigger = resource_income_compare
		parameters = { resource = $RESOURCE$ }
		variable = mmgsiege_new_$RESOURCE$_stockpile_budget
	}
	if = {
		limit = { is_variable_set = mmgsiege_$RESOURCE$_stockpile_budget }
		change_variable = {
			which = mmgsiege_new_$RESOURCE$_stockpile_budget
			value = mmgsiege_$RESOURCE$_stockpile_budget
		}
	}
	multiply_variable = {
		which = mmgsiege_new_$RESOURCE$_stockpile_budget
		value = $PERCENT$
	}
	divide_variable = {
		which = mmgsiege_new_$RESOURCE$_stockpile_budget
		value = 100
	}
	round_variable = mmgsiege_new_$RESOURCE$_stockpile_budget
	if = {
		limit = {
			check_variable = {
				which = mmgsiege_new_$RESOURCE$_stockpile_budget
				value < 0
			}
		}
		set_variable = {
			which = mmgsiege_new_$RESOURCE$_stockpile_budget
			value = 0
		}
	}
	set_variable = {
		which = mmgsiege_$RESOURCE$_stockpile_budget
		value = mmgsiege_new_$RESOURCE$_stockpile_budget
	}
	clear_variable = mmgsiege_new_$RESOURCE$_stockpile_budget
}
