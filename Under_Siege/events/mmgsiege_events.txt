namespace = mmgsiege

# main event, checks resource balances and progresses shortages
country_event = {
	id = mmgsiege.1
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		every_controlled_planet = {
			limit = { mmgsiege_is_under_siege = yes }
			mmgsiege_check_for_and_update_resource_shortage = { RESOURCE = food }
			mmgsiege_check_for_and_update_resource_shortage = { RESOURCE = minerals }
			mmgsiege_check_for_and_update_resource_shortage = { RESOURCE = energy }
			mmgsiege_check_for_and_update_resource_shortage = { RESOURCE = consumer_goods }
			mmgsiege_create_or_remove_shortage_modifiers = yes
			mmgsiege_update_planet_status = yes
		}

		every_controlled_planet = {
			limit = {
				OR = {
					has_planet_flag = mmgsiege_food_shortage
					has_planet_flag = mmgsiege_minerals_shortage
					has_planet_flag = mmgsiege_energy_shortage
					has_planet_flag = mmgsiege_consumer_goods_shortage
					has_planet_flag = mmgsiege_under_siege
				}
				mmgsiege_is_under_siege = no
			}
			mmgsiege_check_for_and_update_resource_shortage_no_siege = { RESOURCE = food }
			mmgsiege_check_for_and_update_resource_shortage_no_siege = { RESOURCE = minerals }
			mmgsiege_check_for_and_update_resource_shortage_no_siege = { RESOURCE = energy }
			mmgsiege_check_for_and_update_resource_shortage_no_siege = { RESOURCE = consumer_goods }
			mmgsiege_create_or_remove_shortage_modifiers = yes
			mmgsiege_update_planet_status = yes
		}
	}
}

# notify the surrenderer
# from = planet that surrendered
# fromfrom = surrender receiver
country_event = {
	id = mmgsiege.2
	is_triggered_only = yes
	title = "mmgsiege_planet_surrendered_to_enemy_title"
	desc = "mmgsiege_planet_surrendered_to_enemy_desc"
	picture = GFX_evt_burning_city
	location = from
	option = {
		name = CLOSE
	}
}

# notify the surrender receiver
# from = planet that surrendered
# fromfrom = surrenderer
country_event = {
	id = mmgsiege.3
	is_triggered_only = yes
	title = "mmgsiege_enemy_planet_surrendered_title"
	desc = "mmgsiege_enemy_planet_surrendered_desc"
	picture = GFX_evt_victorious_army
	location = from
	option = {
		name = CLOSE
	}
}

# stockpile events
# calc stockpile max
planet_event = {
	id = mmgsiege.11
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		# initialize
		set_variable = {
			which = mmgsiege_stockpile_maximum_from_capital
			value = 0
		}

		# capital tier
		if = {
			limit = { has_fully_upgraded_capital = yes }
			change_variable = {
				which = mmgsiege_stockpile_maximum_from_capital
				value = 1000
			}
		}
		else_if = {
			limit = { has_major_upgraded_capital = yes }
			change_variable = {
				which = mmgsiege_stockpile_maximum_from_capital
				value = 500
			}
		}
		else_if = {
			limit = { has_upgraded_capital = yes }
			change_variable = {
				which = mmgsiege_stockpile_maximum_from_capital
				value = 300
			}
		}
		else = {
			change_variable = {
				which = mmgsiege_stockpile_maximum_from_capital
				value = 100
			}
		}

		set_variable = {
			which = mmgsiege_stockpile_maximum
			value = mmgsiege_stockpile_maximum_from_capital
		}

		# other buildings
		# resource silo
		mmgsiege_increase_stockpile_max_from_buildings = {
			BUILDING_TYPE = building_resource_silo
			MULTIPLIER = 1000
		}
		# stronghold
		mmgsiege_increase_stockpile_max_from_buildings = {
			BUILDING_TYPE = building_stronghold
			MULTIPLIER = 100
		}
		# fortress
		mmgsiege_increase_stockpile_max_from_buildings = {
			BUILDING_TYPE = building_fortress
			MULTIPLIER = 200
		}

		# reduce stockpiles if above max
		if = {
			limit = {
				is_variable_set = mmgsiege_energy_stockpile
				check_variable = {
					which = mmgsiege_energy_stockpile
					value > mmgsiege_stockpile_maximum
				}
			}
			set_variable = {
				which = mmgsiege_energy_stockpile
				value = mmgsiege_stockpile_maximum
			}
		}
		if = {
			limit = {
				is_variable_set = mmgsiege_minerals_stockpile
				check_variable = {
					which = mmgsiege_minerals_stockpile
					value > mmgsiege_stockpile_maximum
				}
			}
			set_variable = {
				which = mmgsiege_minerals_stockpile
				value = mmgsiege_stockpile_maximum
			}
		}
		if = {
			limit = {
				is_variable_set = mmgsiege_food_stockpile
				check_variable = {
					which = mmgsiege_food_stockpile
					value > mmgsiege_stockpile_maximum
				}
			}
			set_variable = {
				which = mmgsiege_food_stockpile
				value = mmgsiege_stockpile_maximum
			}
		}
		if = {
			limit = {
				is_variable_set = mmgsiege_consumer_goods_stockpile
				check_variable = {
					which = mmgsiege_consumer_goods_stockpile
					value > mmgsiege_stockpile_maximum
				}
			}
			set_variable = {
				which = mmgsiege_consumer_goods_stockpile
				value = mmgsiege_stockpile_maximum
			}
		}
	}
}

# init stockpile vars
planet_event = {
	id = mmgsiege.12
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = { NOT = { is_variable_set = mmgsiege_energy_stockpile } }
			set_variable = {
				which = mmgsiege_energy_stockpile
				value = 0
			}
		}
		if = {
			limit = { NOT = { is_variable_set = mmgsiege_minerals_stockpile } }
			set_variable = {
				which = mmgsiege_minerals_stockpile
				value = 0
			}
		}
		if = {
			limit = { NOT = { is_variable_set = mmgsiege_food_stockpile } }
			set_variable = {
				which = mmgsiege_food_stockpile
				value = 0
			}
		}
		if = {
			limit = { NOT = { is_variable_set = mmgsiege_consumer_goods_stockpile } }
			set_variable = {
				which = mmgsiege_consumer_goods_stockpile
				value = 0
			}
		}
	}
}

event = {
	id = mmgsiege.13
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		every_country = {
			every_owned_planet = {
				planet_event = { id = mmgsiege.11 } # init stockpile maximum
				planet_event = { id = mmgsiege.12 } # init stockpile resources
			}
		}
	}
}

situation_event = {
	id = mmgsiege.21
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		situation_event = {
			id = mmgsiege.22
			days = 1
		}
	}
}

situation_event = {
	id = mmgsiege.22
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		target = {
			if = {
				limit = {
					any_targeting_situation = {
						is_situation_type = mmgsiege_siege_surrender_attacker_situation
					}
				}
				random_targeting_situation = {
					limit = {
						is_situation_type = mmgsiege_siege_surrender_attacker_situation
					}
					set_variable = {
						which = mmgsiege_sync_progress
						value = root.trigger:situation_progress
					}
					subtract_variable = {
						which = mmgsiege_sync_progress
						value = trigger:situation_progress
					}
					add_situation_progress = mmgsiege_sync_progress
					clear_variable = mmgsiege_sync_progress
				}
			}
		}
	}
}

# update planet status on_system_controller_changed
system_event = {
	id = mmgsiege.31
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		every_system_planet = {
			limit = { is_colony = yes }
			mmgsiege_update_planet_status = yes
		}
	}
}

# update planet status on_planet_transfer on_planet_occupied on_planet_ownerless
planet_event = {
	id = mmgsiege.32
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		mmgsiege_update_planet_status = yes
	}
}

# clean up shortages up on_planet_ownerless
planet_event = {
	id = mmgsiege.33
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		mmgsiege_decrease_resource_shortage = { RESOURCE = energy }
		mmgsiege_decrease_resource_shortage = { RESOURCE = energy }
		mmgsiege_decrease_resource_shortage = { RESOURCE = energy }
		mmgsiege_decrease_resource_shortage = { RESOURCE = energy }
		mmgsiege_decrease_resource_shortage = { RESOURCE = minerals }
		mmgsiege_decrease_resource_shortage = { RESOURCE = minerals }
		mmgsiege_decrease_resource_shortage = { RESOURCE = minerals }
		mmgsiege_decrease_resource_shortage = { RESOURCE = minerals }
		mmgsiege_decrease_resource_shortage = { RESOURCE = food }
		mmgsiege_decrease_resource_shortage = { RESOURCE = food }
		mmgsiege_decrease_resource_shortage = { RESOURCE = food }
		mmgsiege_decrease_resource_shortage = { RESOURCE = food }
		mmgsiege_decrease_resource_shortage = { RESOURCE = consumer_goods }
		mmgsiege_decrease_resource_shortage = { RESOURCE = consumer_goods }
		mmgsiege_decrease_resource_shortage = { RESOURCE = consumer_goods }
		mmgsiege_decrease_resource_shortage = { RESOURCE = consumer_goods }
	}
}