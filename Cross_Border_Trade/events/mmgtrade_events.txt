namespace = mmgtrade
event = {
	id = mmgtrade.1
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		# clean up all existing border trade
		every_system = {
			limit = { has_star_flag = mmgtrade_has_cbt }
			remove_star_flag = mmgtrade_has_cbt
			# these variables are kept around in mmgtrade_has_cbt systems for easier debugging, clear them now
			clear_variable = mmgtrade_relative_network_size
			clear_variable = mmgtrade_num_cbt_systems
			if = {
				# only clear months if there's no owner so that we can keep incrementing it
				# conditionally cleared later in event for owned systems
				limit = {
					NOT = { exists = owner }
					is_variable_set = mmgtrade_consecutive_cbt_months
				}
				clear_variable = mmgtrade_consecutive_cbt_months
			}
			# clear all the modifiers
			star = {
				remove_modifier = mmgtrade_cbt_with_bigger_network
				remove_modifier = mmgtrade_long_term_cbt
				remove_modifier = mmgtrade_cbt_early_trading
				remove_modifier = mmgtrade_cbt_space_trading
				remove_modifier = mmgtrade_cbt_interstellar_economics
				remove_modifier = mmgtrade_cbt_galactic_markets
			}
		}

		every_playable_country = {
			limit = {
				is_country_type = default
				is_gestalt = no
				not = { has_valid_civic = civic_inwards_perfection }
			}
			every_system_within_border = {
				limit = {
					any_neighbor_system = {
						exists = owner
						owner = { is_country = prevprevprev }
					}
				}

				# init/reset relative network size
				set_variable = {
					which = mmgtrade_relative_network_size
					value = 1
				}
				set_variable = {
					which = mmgtrade_num_cbt_systems
					value = 0
				}

				# for each valid system, add trade value and check relative network size
				every_neighbor_system = {
					limit = {
						exists = owner
						owner = {
							not = { is_country = prevprevprev }
							is_country_type = default
							is_gestalt = no
							not = { has_valid_civic = civic_inwards_perfection }
							or = {
								has_commercial_pact = prevprevprev
								is_in_federation_with = prevprevprev
								has_overlord = prevprevprev
								is_overlord_to = prevprevprev
								# subjects of same overlord
								and = {
									is_subject = yes
									overlord = {
										is_overlord_to = prevprevprev
									}
								}
							}
						}
					}

					prev = {
						# set flag
						set_star_flag = mmgtrade_has_cbt
						# increment num systems
						change_variable = {
							which = mmgtrade_num_cbt_systems
							value = 1
						}
						# propose relative size
						set_variable = {
							which = mmgtrade_proposed_relative_network_size
							value = prev.owner.trigger:trade_income
						}
						if = {
							limit = { owner = { trade_income > 1 } }
							divide_variable = {
								which = mmgtrade_proposed_relative_network_size
								value = owner.trigger:trade_income
							}
						}
						# use new proposed relative network size if bigger
						if = {
							limit = {
								check_variable = {
									which = mmgtrade_proposed_relative_network_size
									value > mmgtrade_relative_network_size
								}
							}
							set_variable = {
								which = mmgtrade_relative_network_size
								value = mmgtrade_proposed_relative_network_size
							}
						}
						clear_variable = mmgtrade_proposed_relative_network_size
					}
				}

				if = {
					limit = { has_star_flag = mmgtrade_has_cbt }

					# add base trade value modifier depending on technology
					if = {
						limit = { prev.owner = { has_technology = tech_galactic_markets } }
						star = {
							add_modifier = {
								modifier = mmgtrade_cbt_galactic_markets
								multiplier = prev.mmgtrade_num_cbt_systems
							}
						}
					}
					else_if = {
						limit = { prev.owner = { has_technology = tech_interstellar_economics } }
						star = {
							add_modifier = {
								modifier = mmgtrade_cbt_interstellar_economics
								multiplier = prev.mmgtrade_num_cbt_systems
							}
						}
					}
					else_if = {
						limit = { prev.owner = { has_technology = tech_space_trading } }
						star = {
							add_modifier = {
								modifier = mmgtrade_cbt_space_trading
								multiplier = prev.mmgtrade_num_cbt_systems
							}
						}
					}
					else = {
						star = {
							add_modifier = {
								modifier = mmgtrade_cbt_early_trading
								multiplier = prev.mmgtrade_num_cbt_systems
							}
						}
					}

					# increase months and apply long term bonus
					if = {
						limit = { is_variable_set = mmgtrade_consecutive_cbt_months }
						change_variable = {
							which = mmgtrade_consecutive_cbt_months
							value = 1
						}
					}
					else = {
						set_variable = {
							which = mmgtrade_consecutive_cbt_months
							value = 1
						}
					}
					if = {
						limit = {
							check_variable = {
								which = mmgtrade_consecutive_cbt_months
								value >= 12
							}
						}
						set_variable = {
							which = mmgtrade_long_term_cbt_multiplier
							value = mmgtrade_consecutive_cbt_months
						}
						divide_variable = {
							which = mmgtrade_long_term_cbt_multiplier
							value = 12
						}
						floor_variable = mmgtrade_long_term_cbt_multiplier
						# max 20 years bonus
						if = {
							limit = {
								check_variable = {
									which = mmgtrade_long_term_cbt_multiplier
									value > 20
								}
							}
							set_variable = {
								which = mmgtrade_long_term_cbt_multipler
								value = 20
							}
						}
						star = {
							add_modifier = {
								modifier = mmgtrade_long_term_cbt
								multiplier = prev.mmgtrade_long_term_cbt_multiplier
							}
						}
						clear_variable = mmgtrade_long_term_cbt_multiplier
					}

					# apply modifier based on relative network size
					if = {
						limit = {
							check_variable = {
								which = mmgtrade_relative_network_size
								value > 1
							}
						}
						set_variable = {
							which = mmgtrade_cbt_with_bigger_network_multiplier
							value = mmgtrade_relative_network_size
						}
						# max of 10x
						if = {
							limit = {
								check_variable = {
									which = mmgtrade_cbt_with_bigger_network_multiplier
									value > 10
								}
							}
							set_variable = {
								which = mmgtrade_cbt_with_bigger_network_multiplier
								value = 10
							}
						}
						# subtract 1, because multipliers are added to 1 (mult of 0.5 = 150%)
						subtract_variable = {
							which = mmgtrade_cbt_with_bigger_network_multiplier
							value = 1
						}
						# add modifier
						star = {
							add_modifier = {
								modifier = mmgtrade_cbt_with_bigger_network
								multiplier = prev.mmgtrade_cbt_with_bigger_network_multiplier
							}
						}
						# cleanup
						clear_variable = mmgtrade_cbt_with_bigger_network_multiplier
					}
				}
				else = {
					# no trade, clean up variables including mmgtrade_consecutive_cbt_months
					if = {
						limit = { is_variable_set = mmgtrade_consecutive_cbt_months }
						clear_variable = mmgtrade_consecutive_cbt_months
					}
					clear_variable = mmgtrade_relative_network_size
					clear_variable = mmgtrade_num_cbt_systems
				}
			}
		}
	}
}