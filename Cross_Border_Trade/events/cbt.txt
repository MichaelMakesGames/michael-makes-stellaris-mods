namespace = cbt
event = {
	id = cbt.0
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		# clean up all existing border trade
		every_system = {
			limit = { has_star_flag = cbt_has_cross_border_trade_value }
			remove_star_flag = cbt_has_cross_border_trade_value
			clear_variable = cbt_relative_network_size
			clear_variable = cbt_proposed_relative_network_size
			clear_variable = cbt_relative_network_size_multiplier
			star = {
				remove_modifier = cbt_trade_with_bigger_network
				remove_modifier = cbt_trade_with_smaller_network
				while = {
					limit = { has_deposit = d_trade_value_10 }
					remove_deposit = d_trade_value_10
				}
				while = {
					limit = { has_deposit = d_trade_value_5 }
					remove_deposit = d_trade_value_5
				}
				while = {
					limit = { has_deposit = d_trade_value_2 }
					remove_deposit = d_trade_value_2
				}
			}
		}

		every_playable_country = {
			limit = {
				is_country_type = default
				is_gestalt = no
				not = { has_valid_civic = civic_inwards_perfection }
			}
			every_system_within_border = {
				limit = {
					any_neighbor_system = {
						exists = owner
						owner = { is_country = prevprevprev }
					}
				}

				# init/reset relative network size
				set_variable = {
					which = cbt_relative_network_size
					value = 0
				}

				# for each valid system, add trade value and check relative network size
				every_neighbor_system = {
					limit = {
						exists = owner
						owner = {
							not = { is_country = prevprevprev }
							is_country_type = default
							is_gestalt = no
							not = { has_valid_civic = civic_inwards_perfection }
							or = {
								has_commercial_pact = prevprevprev
								is_in_federation_with = prevprevprev
								has_overlord = prevprevprev
								is_overlord_to = prevprevprev
								# subjects of same overlord
								and = {
									is_subject = yes
									overlord = {
										is_overlord_to = prevprevprev
									}
								}
							}
						}
					}

					# set flag
					prev = { set_star_flag = cbt_has_cross_border_trade_value }

					# add deposits depending on technology
					if = {
						limit = { prev.owner = { has_technology = tech_galactic_markets } }
						prev.star = {
							add_deposit = d_trade_value_10
							add_deposit = d_trade_value_10
						}
					}
					else_if = {
						limit = { prev.owner = { has_technology = tech_interstellar_economics } }
						prev.star = { add_deposit = d_trade_value_10 }
					}
					else_if = {
						limit = { prev.owner = { has_technology = tech_space_trading } }
						prev.star = { add_deposit = d_trade_value_5 }
					}
					else = {
						prev.star = { add_deposit = d_trade_value_2 }
					}

					# propose new relative network size
					prev = {
						set_variable = {
							which = cbt_proposed_relative_network_size
							value = prev.owner.trigger:trade_income
						}
						divide_variable = {
							which = cbt_proposed_relative_network_size
							value = owner.trigger:trade_income
						}

						# use new proposed relative network size if bigger
						if = {
							limit = {
								check_variable = {
									which = cbt_proposed_relative_network_size
									value > this.cbt_relative_network_size
								}
							}
							set_variable = {
								which = cbt_relative_network_size
								value = this.cbt_proposed_relative_network_size
							}
						}
					}
				}

				# set modifier if flagged (ie border trade value was added)
				if = {
					limit = { has_star_flag = cbt_has_cross_border_trade_value }

					# round network size for nicer number
					round_variable_to_closest = {
						which = cbt_relative_network_size
						value = 0.05
					}
	
					# apply modifier based on relative network size
					if = {
						limit = {
							check_variable = {
								which = cbt_relative_network_size
								value > 1
							}
						}
						set_variable = {
							which = cbt_relative_network_size_multiplier
							value = cbt_relative_network_size
						}
						subtract_variable = {
							which = cbt_relative_network_size_multiplier
							value = 1
						}
						multiply_variable = {
							which = cbt_relative_network_size_multiplier
							value = 2
						}
						star = {
							add_modifier = {
								modifier = cbt_trade_with_bigger_network
								multiplier = prev.cbt_relative_network_size_multiplier
							}
						}
					}
					else_if = {
						limit = {
							check_variable = {
								which = cbt_relative_network_size
								value < 1
							}
						}
						set_variable = {
							which = cbt_relative_network_size_multiplier
							value = cbt_relative_network_size
						}
						multiply_variable = {
							which = cbt_relative_network_size_multiplier
							value = -1
						}
						change_variable = {
							which = cbt_relative_network_size_multiplier
							value = 1
						}
						multiply_variable = {
							which = cbt_relative_network_size_multiplier
							value = 2
						}
						star = {
							add_modifier = {
								modifier = cbt_trade_with_smaller_network
								multiplier = prev.cbt_relative_network_size_multiplier
							}
						}
					}
				}
				# otherwise clear variables
				else = {
					if = {
						limit = { is_variable_set = cbt_proposed_relative_network_size }
						clear_variable = cbt_proposed_relative_network_size
					}
					if = {
						limit = { is_variable_set = cbt_relative_network_size }
						clear_variable = cbt_relative_network_size
					}
				}
			}
		}
	}
}